package com.randomnoun.common.db.explain;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.io.StringWriter;

import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import com.randomnoun.common.StreamUtil;
import com.randomnoun.common.db.explain.enums.TooltipTypeEnum;
import com.randomnoun.common.db.explain.graph.Shape;
import com.randomnoun.common.db.explain.layout.CompatibleLayout;
import com.randomnoun.common.db.explain.layout.ExplaineratorLayout;
import com.randomnoun.common.db.explain.parser.PlanParser;
import com.randomnoun.common.db.explain.visitor.RangeShapeVisitor;
import com.randomnoun.common.db.explain.visitor.ReweightShapeVisitor;
import com.randomnoun.common.db.explain.visitor.SvgWriterShapeVisitor;
import com.randomnoun.common.log4j.Log4jCliConfiguration;

import junit.framework.TestCase;

public abstract class SqlExplaineratorTestBase extends TestCase {

	Logger logger = Logger.getLogger(SqlExplaineratorTestBase.class);

	private static boolean WRITE_EXPECTED_OUTPUT = false;

	public void setUp() throws IOException {
		Log4jCliConfiguration lcc = new Log4jCliConfiguration();
		lcc.init("[sql-explainerator]", null);
	}

	public void testParser(String resourceName) throws IOException, ParseException {
		InputStream is = SqlExplainerator.class.getResourceAsStream("/" + resourceName + ".json");
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		StreamUtil.copyStream(is, baos);
		String json = baos.toString();
		CompactJsonWriter w = new CompactJsonWriter();
		JSONParser jp = new JSONParser();
		JSONObject obj = (JSONObject) jp.parse(json);

		// the roundtrip-1 file is exactly the same as the input, but formatted by the
		// CompactJsonWriter
		File tf = new File("src/test/resources/expected-output/" + resourceName + "-roundtrip-1.json");
		StringWriter sw = new StringWriter();
		PrintWriter pw = new PrintWriter(sw);
		w.writeJSONValue(obj, pw);
		pw.flush();
		if (WRITE_EXPECTED_OUTPUT) {
			FileOutputStream fos = new FileOutputStream(tf);
			fos.write(sw.toString().getBytes());
			fos.close();
		} else {
			FileInputStream fis = new FileInputStream(tf);
			String expected = new String(StreamUtil.getByteArray(fis));
			fis.close();
			assertEquals("difference in " + resourceName + "-roundtrip-1.json", expected.trim(), sw.toString().trim());
		}

		// the roundtrip-2 file is the object tree stored generated by the PlanParser,
		// also formatted by the CompactJsonWriter
		for (int i = 0; i < 2; i++) { // 0 = newLayout, 1 = compatible layout
			PlanParser pp = new PlanParser("8.0", i == 0);
			pp.parse(json);
			String roundtripJson = pp.toJson();
			obj = (JSONObject) jp.parse(roundtripJson);
			StringWriter sw2 = new StringWriter();
			PrintWriter pw2 = new PrintWriter(sw2);
			w.writeJSONValue(obj, pw2);
			pw.flush();

			File tf2 = new File("src/test/resources/expected-output" + (i == 1 ? "-workbench" : "") + "/" + resourceName + "-roundtrip-2.json");
			if (WRITE_EXPECTED_OUTPUT) {
				FileOutputStream fos = new FileOutputStream(tf2);
				fos.write(sw2.toString().getBytes());
				fos.close();
			} else {
				FileInputStream fis = new FileInputStream(tf2);
				String expected = new String(StreamUtil.getByteArray(fis));
				fis.close();
				assertEquals("difference in " + resourceName + "-roundtrip-2.json", expected.trim(),
						sw2.toString().trim());
			}
		}
	}

	public void testSvg(String resourceName) throws IOException, ParseException {
		InputStream is = SqlExplainerator.class.getResourceAsStream("/" + resourceName + ".json");
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		StreamUtil.copyStream(is, baos);
		String json = baos.toString();

		for (int i = 0; i < 2; i++) { // 0 = newLayout, 1 = compatible layout

			PlanParser pp = new PlanParser("8.0", i == 0);
			pp.parse(json);

			// diagram attempts
			ExplaineratorLayout layout = (i == 0 ? new ExplaineratorLayout() : new CompatibleLayout());
			layout.setQueryBlockNode(pp.getTopNode());
			Shape b = layout.getLayoutShape();

			// translate diagram so that top-left is 0, 0
			RangeShapeVisitor rv = new RangeShapeVisitor();
			b.traverse(rv);
			b.setPosX(b.getPosX() - rv.getMinX());
			b.setPosY(b.getPosY() - rv.getMinY());

			ReweightShapeVisitor rwv = new ReweightShapeVisitor(rv.getMinWeight(), rv.getMaxWeight());
			b.traverse(rwv);

			for (TooltipTypeEnum tooltipType : TooltipTypeEnum.values()) {
				String ttName = tooltipType.getValue();

				StringWriter sw = new StringWriter();
				PrintWriter pw = new PrintWriter(sw);
				SvgWriterShapeVisitor sbv = new SvgWriterShapeVisitor(pw, true, tooltipType, null, null); // TooltipTypeEnum.SVG_TITLE
				b.traverse(sbv);
				pw.flush();

				File tf = new File("src/test/resources/expected-output" + (i == 1 ? "-workbench" : "") + "/"
						+ resourceName + "-" + ttName + ".html");
				if (WRITE_EXPECTED_OUTPUT) {
					FileOutputStream fos = new FileOutputStream(tf);
					fos.write(sw.toString().getBytes());
					fos.close();
				} else {
					FileInputStream fis = new FileInputStream(tf);
					String expected = new String(StreamUtil.getByteArray(fis));
					fis.close();
					assertEquals("difference in " + resourceName + ".html", expected.trim(), sw.toString().trim());
				}

				sw = new StringWriter();
				pw = new PrintWriter(sw);
				sbv = new SvgWriterShapeVisitor(pw, false, tooltipType, null, null);
				b.traverse(sbv);
				pw.flush();

				tf = new File("src/test/resources/expected-output" + (i == 1 ? "-workbench" : "") + "/" + resourceName
						+ "-" + ttName + ".svg");
				if (WRITE_EXPECTED_OUTPUT) {
					FileOutputStream fos = new FileOutputStream(tf);
					fos.write(sw.toString().getBytes());
					fos.close();
				} else {
					FileInputStream fis = new FileInputStream(tf);
					String expected = new String(StreamUtil.getByteArray(fis));
					fis.close();
					assertEquals("difference in " + resourceName + ".svg", expected.trim(), sw.toString().trim());
				}
			}
		}

	}

}
